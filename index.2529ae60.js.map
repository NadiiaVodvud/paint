{"mappings":"AAEA,MAAMA,EAAQ,CACZC,MAAO,UACPC,KAAM,GACNC,MAAO,UAEHC,EAAS,GAETC,EAAiBC,SAASC,cAAc,YACxCC,EAAoBF,SAASC,cAAc,gBAC3CE,EAAgBH,SAASI,iBAAiB,UAC1CC,EAAgBL,SAASC,cAAc,WAEvCK,EAAS,ICdR,MACLC,YAAYC,GACVC,KAAKD,IAAMA,C,CAGbE,OAAOC,GACLF,KAAKG,QAELD,EAAOE,SAAQhB,IAKb,OAJIA,EAAMiB,UACRL,KAAKD,IAAIO,YAAc,IAGjBlB,EAAMmB,MACZ,IAAK,SACHP,KAAKQ,aAAapB,GAClB,MAGF,IAAK,SACHY,KAAKS,aAAarB,GAClB,MAGF,QACEsB,QAAQC,IAAI,iBAAiBvB,EAAMmB,Q,IAKzCP,KAAKD,IAAIO,YAAc,C,CAGzBE,aAAapB,GACX,MAAMwB,EAASxB,EAAMD,KAAO,EAE5Ba,KAAKD,IAAIc,YACTb,KAAKD,IAAIe,IAAI1B,EAAM2B,EAAG3B,EAAM4B,EAAGJ,EAAQ,EAAG,EAAIK,KAAKC,IACnDlB,KAAKD,IAAIoB,UAAY/B,EAAMF,MAC3Bc,KAAKD,IAAIqB,M,CAGXX,aAAarB,GACX,MAAMiC,EAAWjC,EAAMD,KAAO,EAE9Ba,KAAKD,IAAIoB,UAAY/B,EAAMF,MAC3Bc,KAAKD,IAAIuB,SACPlC,EAAM2B,EAAIM,EACVjC,EAAM4B,EAAIK,EACVjC,EAAMD,KACNC,EAAMD,K,CAIVgB,QACEH,KAAKD,IAAIwB,UAAU,EAAG,EAAGvB,KAAKD,IAAIyB,OAAOC,MAAOzB,KAAKD,IAAIyB,OAAOE,O,GDzC1C9B,EAAc+B,WAAW,OA4D5C,SAASC,IACdnC,EAAkBoC,YAAc5C,EAAME,KAEtCO,EAAcU,SAAQ0B,IACpBA,EAAaC,MAAMC,gBAAkB/C,EAAMC,KAAK,G,CAI7C,SAAS+C,IACd,MAAMC,EAAatC,EAAcuC,wBAEjCvC,EAAcmC,MAAMN,MAAQ,GAAGS,EAAWT,UAC1C7B,EAAcmC,MAAML,OAAS,GAAGQ,EAAWR,WAC3C9B,EAAc6B,MAAQS,EAAWT,MACjC7B,EAAc8B,OAASQ,EAAWR,M,CAxEpCpC,EAAe8C,iBAAiB,SAQhC,SAA4BC,GAC1B,MAAMC,EAAOD,EAAME,OAAOD,KACpBE,EACkB,UAAtBH,EAAME,OAAOhC,KACT8B,EAAME,OAAOE,cACbJ,EAAME,OAAOC,MAEnBvD,EAAMqD,GAAQE,EAEdZ,G,IAhBFhC,EAAcwC,iBAAiB,SAmB/B,SAA2BC,GACzB,MAAMH,EAAatC,EAAcuC,wBAC3BpB,EAAIsB,EAAMK,QAAUR,EAAWS,KAC/B3B,EAAIqB,EAAMO,QAAUV,EAAWW,IAE/BC,EAAW,CACfvC,KAAMtB,EAAMG,MACZD,KAAMF,EAAME,KACZD,MAAOD,EAAMC,M,EACb6B,E,EACAC,GAGF3B,EAAO0D,KAAKD,GACZjD,EAAOI,OAAOZ,E,IAhChBO,EAAcwC,iBAAiB,aAmC/B,SAA+BC,GAC7B,MAAMH,EAAatC,EAAcuC,wBAC3BpB,EAAIsB,EAAMK,QAAUR,EAAWS,KAC/B3B,EAAIqB,EAAMO,QAAUV,EAAWW,IAE/BG,EAAY,CAChBzC,KAAMtB,EAAMG,MACZD,KAAMF,EAAME,KACZD,MAAOD,EAAMC,MACbmB,QAAS,G,EACTU,E,EACAC,GAGFnB,EAAOI,OAAO,IAAIZ,EAAQ2D,G,IAhD5BC,OAAOb,iBAAiB,UAmDxB,WACEH,G,IEpEFL,IACAK","sources":["src/js/colourpicker.js","src/js/Canvas.js","src/index.js"],"sourcesContent":["import { Canvas } from './Canvas.js';\n\nconst state = {\n  color: '#00ff00',\n  size: 50,\n  shape: 'circle',\n};\nconst shapes = [];\n\nconst toolbarElement = document.querySelector('#toolbar');\nconst sizeOutputElement = document.querySelector('#size-output');\nconst shapeElements = document.querySelectorAll('.shape');\nconst canvasElement = document.querySelector('#canvas');\n\nconst canvas = new Canvas(canvasElement.getContext('2d'));\n\ntoolbarElement.addEventListener('input', handleToolbarInput);\ncanvasElement.addEventListener('click', handleCanvasClick);\ncanvasElement.addEventListener('mousemove', handleCanvasMouseMove);\nwindow.addEventListener('resize', handlePageResize);\n\n// updateToolbarUI();\n// setCanvasSize();\n\nfunction handleToolbarInput(event) {\n  const name = event.target.name;\n  const value =\n    event.target.type === 'range'\n      ? event.target.valueAsNumber\n      : event.target.value;\n\n  state[name] = value;\n\n  updateToolbarUI();\n}\n\nfunction handleCanvasClick(event) {\n  const canvasRect = canvasElement.getBoundingClientRect();\n  const x = event.clientX - canvasRect.left;\n  const y = event.clientY - canvasRect.top;\n\n  const newShape = {\n    type: state.shape,\n    size: state.size,\n    color: state.color,\n    x,\n    y,\n  };\n\n  shapes.push(newShape);\n  canvas.render(shapes);\n}\n\nfunction handleCanvasMouseMove(event) {\n  const canvasRect = canvasElement.getBoundingClientRect();\n  const x = event.clientX - canvasRect.left;\n  const y = event.clientY - canvasRect.top;\n\n  const tempShape = {\n    type: state.shape,\n    size: state.size,\n    color: state.color,\n    opacity: 0.5,\n    x,\n    y,\n  };\n\n  canvas.render([...shapes, tempShape]);\n}\n\nfunction handlePageResize() {\n  setCanvasSize();\n}\n\nexport function updateToolbarUI() {\n  sizeOutputElement.textContent = state.size;\n\n  shapeElements.forEach(shapeElement => {\n    shapeElement.style.backgroundColor = state.color;\n  });\n}\n\nexport function setCanvasSize() {\n  const canvasRect = canvasElement.getBoundingClientRect();\n\n  canvasElement.style.width = `${canvasRect.width}px`;\n  canvasElement.style.height = `${canvasRect.height}px`;\n  canvasElement.width = canvasRect.width;\n  canvasElement.height = canvasRect.height;\n}\n","export class Canvas {\n  constructor(ctx) {\n    this.ctx = ctx;\n  }\n\n  render(shapes) {\n    this.clear();\n\n    shapes.forEach(shape => {\n      if (shape.opacity) {\n        this.ctx.globalAlpha = 0.5;\n      }\n\n      switch (shape.type) {\n        case 'circle': {\n          this.renderCircle(shape);\n          break;\n        }\n\n        case 'square': {\n          this.renderSquare(shape);\n          break;\n        }\n\n        default: {\n          console.log(`Unknown shape ${shape.type}`);\n        }\n      }\n    });\n\n    this.ctx.globalAlpha = 1;\n  }\n\n  renderCircle(shape) {\n    const radius = shape.size / 2;\n\n    this.ctx.beginPath();\n    this.ctx.arc(shape.x, shape.y, radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = shape.color;\n    this.ctx.fill();\n  }\n\n  renderSquare(shape) {\n    const halfSize = shape.size / 2;\n\n    this.ctx.fillStyle = shape.color;\n    this.ctx.fillRect(\n      shape.x - halfSize,\n      shape.y - halfSize,\n      shape.size,\n      shape.size\n    );\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n}\n","import { updateToolbarUI } from './js/colourpicker';\nimport { setCanvasSize } from './js/colourpicker';\n\nupdateToolbarUI();\nsetCanvasSize();\n"],"names":["$e6d6927100157062$var$state","color","size","shape","$e6d6927100157062$var$shapes","$e6d6927100157062$var$toolbarElement","document","querySelector","$e6d6927100157062$var$sizeOutputElement","$e6d6927100157062$var$shapeElements","querySelectorAll","$e6d6927100157062$var$canvasElement","$e6d6927100157062$var$canvas","constructor","ctx","this","render","shapes","clear","forEach","opacity","globalAlpha","type","renderCircle","renderSquare","console","log","radius","beginPath","arc","x","y","Math","PI","fillStyle","fill","halfSize","fillRect","clearRect","canvas","width","height","getContext","$e6d6927100157062$export$30163e69857106bd","textContent","shapeElement","style","backgroundColor","$e6d6927100157062$export$e3aebd8246ac72dc","canvasRect","getBoundingClientRect","addEventListener","event","name","target","value","valueAsNumber","clientX","left","clientY","top","newShape","push","tempShape","window"],"version":3,"file":"index.2529ae60.js.map"}